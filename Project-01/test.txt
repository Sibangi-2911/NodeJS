Schema - Define the structure
using the schema model is made
using the model  we do CRUD operations.(create,read,update,delete)


//This was written under post when connected to database that was only within the file that is using mockaroo
const users = require("./MOCK_DATA.json");
users.push({...body, id: users.length+1});
  fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err) => {
  if (err) {
    return res.status(500).json({ error: "Failed to write data" });
  }
  return res.status(201).json({ status: "User added successfully",id: users.length});
});
  console.log("Body: ",body);

//under get method /api/users/:id
const id = Number(req.params.id);
  const user = users.find((user)=>user.id==id);

//under the patch method
const id = Number(req.params.id);
  const index = users.findIndex((user)=>user.id==id);
   /update user info
  users[index]={...users[index],...req.body};
  fs.writeFile("./MOCK_DATA.json",JSON.stringify(users), (err)=>{
    if(err){
      return res.status(500).json({error: "failed to update user"});
    }
    return res.json({status:"user updated successfully", user:users[index]});
    });
  //for delete method
  //delete the user with id
  const id = Number(req.params.id);
  const index = users.findIndex((user)=>user.id==id);

  if(index==-1){
    return res.status(404).json({error:"user not found"});
  }

  //Remove user from list
  const deletedUser = users.splice(index,1)[0];

  fs.writeFile("./MOCK_DATA.json",JSON.stringify(users),(err)=>{
    if(err){
      return res.status(500).json({error: "failed to delete user"});
    }
    return res.json({ status: "User deleted", deletedUser });
  });

///////////for html document
  router.get("/users",async(req,res)=>{
  const allDbUsers = await User.find({});
  /*html document
  <ul>
  <li>Name</li>
  </ul>
  */
const html = `
<ul>
${allDbUsers.map((user)=>`<li>${user.firstName}-${user.email}</li>`).join("")}
</ul>
`;
return res.send(html);
});